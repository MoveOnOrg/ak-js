// Generated by CoffeeScript 1.8.0

/*
jQuery Credit Card Validator 1.0

Copyright 2012-2015 Pawel Decowski

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
 */

(function() {
  var $,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  $.fn.validateCreditCard = function(callback, options) {
    var bind, card, card_type, card_types, get_card_type, is_valid_length, is_valid_luhn, normalize, validate, validate_number, _i, _len, _ref;
    card_types = [
      {
        name: 'amex',
        pattern: /^3[47]/,
        valid_length: [15]
      }, {
        name: 'diners_club_carte_blanche',
        pattern: /^30[0-5]/,
        valid_length: [14]
      }, {
        name: 'diners_club_international',
        pattern: /^36/,
        valid_length: [14]
      }, {
        name: 'jcb',
        pattern: /^35(2[89]|[3-8][0-9])/,
        valid_length: [16]
      }, {
        name: 'laser',
        pattern: /^(6304|670[69]|6771)/,
        valid_length: [16, 17, 18, 19]
      }, {
        name: 'visa_electron',
        pattern: /^(4026|417500|4508|4844|491(3|7))/,
        valid_length: [16]
      }, {
        name: 'visa',
        pattern: /^4/,
        valid_length: [16]
      }, {
        name: 'mastercard',
        pattern: /^5[1-5]/,
        valid_length: [16]
      }, {
        name: 'maestro',
        pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,
        valid_length: [12, 13, 14, 15, 16, 17, 18, 19]
      }, {
        name: 'discover',
        pattern: /^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/,
        valid_length: [16]
      }
    ];
    bind = false;
    if (callback) {
      if (typeof callback === 'object') {
        options = callback;
        bind = false;
        callback = null;
      } else if (typeof callback === 'function') {
        bind = true;
      }
    }
    if (options == null) {
      options = {};
    }
    if (options.accept == null) {
      options.accept = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = card_types.length; _i < _len; _i++) {
          card = card_types[_i];
          _results.push(card.name);
        }
        return _results;
      })();
    }
    _ref = options.accept;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      card_type = _ref[_i];
      if (__indexOf.call((function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = card_types.length; _j < _len1; _j++) {
          card = card_types[_j];
          _results.push(card.name);
        }
        return _results;
      })(), card_type) < 0) {
        throw "Credit card type '" + card_type + "' is not supported";
      }
    }
    get_card_type = function(number) {
      var _j, _len1, _ref1;
      _ref1 = (function() {
        var _k, _len1, _ref1, _results;
        _results = [];
        for (_k = 0, _len1 = card_types.length; _k < _len1; _k++) {
          card = card_types[_k];
          if (_ref1 = card.name, __indexOf.call(options.accept, _ref1) >= 0) {
            _results.push(card);
          }
        }
        return _results;
      })();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        card_type = _ref1[_j];
        if (number.match(card_type.pattern)) {
          return card_type;
        }
      }
      return null;
    };
    is_valid_luhn = function(number) {
      var digit, n, sum, _j, _len1, _ref1;
      sum = 0;
      _ref1 = number.split('').reverse();
      for (n = _j = 0, _len1 = _ref1.length; _j < _len1; n = ++_j) {
        digit = _ref1[n];
        digit = +digit;
        if (n % 2) {
          digit *= 2;
          if (digit < 10) {
            sum += digit;
          } else {
            sum += digit - 9;
          }
        } else {
          sum += digit;
        }
      }
      return sum % 10 === 0;
    };
    is_valid_length = function(number, card_type) {
      var _ref1;
      return _ref1 = number.length, __indexOf.call(card_type.valid_length, _ref1) >= 0;
    };
    validate_number = (function(_this) {
      return function(number) {
        var length_valid, luhn_valid;
        card_type = get_card_type(number);
        luhn_valid = false;
        length_valid = false;
        if (card_type != null) {
          luhn_valid = is_valid_luhn(number);
          length_valid = is_valid_length(number, card_type);
        }
        return {
          card_type: card_type,
          valid: luhn_valid && length_valid,
          luhn_valid: luhn_valid,
          length_valid: length_valid
        };
      };
    })(this);
    validate = (function(_this) {
      return function() {
        var number;
        number = normalize($(_this).val());
        return validate_number(number);
      };
    })(this);
    normalize = function(number) {
      return number.replace(/[ -]/g, '');
    };
    if (!bind) {
      return validate();
    }
    this.on('input.jccv', (function(_this) {
      return function() {
        $(_this).off('keyup.jccv');
        return callback.call(_this, validate());
      };
    })(this));
    this.on('keyup.jccv', (function(_this) {
      return function() {
        return callback.call(_this, validate());
      };
    })(this));
    callback.call(this, validate());
    return this;
  };

}).call(this);

$(document).ready(function() {

  /**
   * If donation amount is large and we haven't already confirmed, halt
   * form submission to confirm amount.
   */
  $('form').data('confirmed', false).submit(function(event) {
    var $splitTotal = $('#total-to-split');
    var donationAmount = 0;
    var amountChecked = $('input:radio[name=amount]:checked');
    if (amountChecked.length > 0) {
        donationAmount = parseFloat(amountChecked.val());
    } else {
        donationAmount = parseFloat($('#amount_other_field').val());
    }
    if ($splitTotal.length > 0) {
      donationAmount = parseFloat($splitTotal.val());
    }
    if (donationAmount >= 250) {
      if (!confirmLargeDonation(donationAmount)) {
        event.preventDefault();
      }
    }
  });

  $('form input').keyup(function() {
    $('form').data('confirmed', false);
  });

});

/**
 * Show the large donation confirmation modal.
 */
function confirmLargeDonation(donationAmount) {

  if ($('form').data('confirmed')) {
    return true;
  }

  $('#confirm-big-donation .donation-amount').text(donationAmount);
  $('#confirm-big-donation .btn.yes').click(function() {
    $('#confirm-big-donation').on('hidden.bs.modal', function (e) {
      $('form').data('confirmed', true).trigger('submit');
    });
    $('#confirm-big-donation').modal('hide');
  });
  $('#confirm-big-donation').modal();

  return false;
}

/*
Email suggestion module, a wrapper around the jquery mailcheck plugin.
Use like:


  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js"></script>
  <script src="/javascripts/jquery.mailcheck.js"></script> 
  <script src="/javascripts/email_suggestion.js"></script> 
  <script>$(function() { EmailSuggestion.init(); });</script>

If that can't find your email field you can specify an ID:

  EmailSuggestion.init({ 'email_id': 'my_email_id' });

All options supported:

  email_id - id of your email input

  email_selector - CSS selector of email input

  email_suggestion_id - id of the element used to display the suggestion, if not provided a span will be created after the email input

  email_suggestion_selector - CSS selector of above

  validation_error_class - defaults to set the color

  string - string used to prompt the user, default is "<br>Did you mean <a onclick="EmailSuggestion.ok()">{{email}}</a>?"

*/

var EmailSuggestion = {
    last_email_suggestion: "",
    email_field: undefined,
    email_suggestion_field: undefined,

    // top domains for MoveOn and SignOn as of 2012-04-03
    default_domains: ["gmail.com", "yahoo.com", "hotmail.com", "aol.com", "comcast.net", "msn.com", "sbcglobal.net", "verizon.net", "att.net", "bellsouth.net", "cox.net", "earthlink.net", "live.com", "mac.com", "charter.net", "me.com", "ymail.com", "optonline.net", "juno.com", "excite.com", "netscape.net", "pacbell.net"],

    init: function(args) {
        args = args || {};
        var string = args['string'] || '<div class="blurb moveon-bright-red bump-bottom-1"> Did you mean <strong><span style="cursor:pointer;"onclick="EmailSuggestion.ok()">{{email}}</span></strong>?  <a onclick="EmailSuggestion.ok()">Yes!</a> / <a onclick="EmailSuggestion.nevermind()">No</a> </div>';
        var domains = args['domains'] || this.default_domains;

    // find the email field - using args or just looking for input named email
        if (args['email_id']) {
            this.email_field = $('#'+args['email_id']);
        } else if (args['email_selector']) {
            this.email_field = $(args['email_selector']);
        } else {
            this.email_field = $('input[name="email"]')
        }
        if (!this.email_field.length) {
            throw new Error("Unable to find email field in setup_email_suggestion - please pass in email_id or email_selector.");
        }

        // find the email suggestion span - if one isn't found the
        // suggestion will be put in after the email field
        if (args['email_suggestion_id']) {
            this.email_suggestion_field = $('#'+args['email_suggestion_id']);
        } else if (args['email_suggestion_selector']) {
            this.email_suggestion_field = $(args['email_suggestion_selector']);
        }

        if (args['validation_error_class']) {
           this.validation_error_class = args['validation_error_class'];
        }
        if (!this.email_suggestion_field || !this.email_suggestion_field.length) {
            this.email_field.after('<span id="auto_email_suggestion" class="email_suggestion hidden"></span>');
            this.email_suggestion_field = $('#auto_email_suggestion');
        }
        this.email_field.keypress(function() {
            if (!/.*@.*\.\w+/.test($(this).val())) {
              EmailSuggestion.coloron();
            } else {
              EmailSuggestion.coloroff();
            }
        });
        this.email_field.blur(function() {
            $(this).mailcheck({
                domains: domains,
                suggested: function(element, suggestion) {
                    EmailSuggestion.last_email_suggestion = suggestion;
                    EmailSuggestion.email_suggestion_field.html(string.replace('{{email}}', suggestion['full'])).show().css('visibility', 'visible');
                    EmailSuggestion.coloron();
                },
                empty: function(element) { EmailSuggestion.email_suggestion_field.html(''); }
            });
        });
    },
    ok: function() {
        this.email_field.val(this.last_email_suggestion['full']);
        this.email_suggestion_field.html('');
        this.coloroff();
    },
    nevermind: function() {
        this.email_suggestion_field.html('');
        this.coloroff();
    },
    coloron: function() {
      if (this.validation_error_class) {
        this.email_field.addClass(this.validation_error_class);
      } else {
        this.email_field.attr( 'style', 'color:#c22326;')
      }
    },
    coloroff: function() {
      if (this.validation_error_class) {
        this.email_field.removeClass(this.validation_error_class);
      } else {
        this.email_field.attr( 'style', 'color:#555555;')
      }
    }
};


window.jsErrors = [];
window.onerror = function(errorMessage) {
  window.jsErrors[window.jsErrors.length] = errorMessage;
}

// Roster toggle-all checkbox
function toggleSignups() {
    $(this)
        .closest('form')
        .find('input.toggle')
        .attr('checked', this.checked);
}
// Update "N attendee(s)" in e-mail form
function handleSignupsChanged() {
    var frm = $(this).closest('form');
    var to_count = $('input.toggle:checked').length;
    // Mailing all recipients if nobody's checked
    if ( !to_count )
        to_count = $('input.toggle').length
    // They've figured out the checkboxes; no need to advertise
    if ( to_count )
        frm.find('.check-recipients-help').hide();
    frm.find('.to-count').text(to_count);
}
// E-mail button
function handleEmail() {
    var frm = $(this).closest('form');
    frm.find('.signup-list-controls').slideUp('fast');
    frm.find('.contact-form').slideDown('fast');
    return false;
}
// "E-mail attendee", "e-mail cohost", "invite friends" links
// Unhide if needed and fake :target on IE
function handleJumpLink() {
    var targetEl;
    if ( this.id == 'email-cohosts-link' )
        targetEl = $('fieldset.contact-cohosts');
    else if ( this.id == 'email-attendees-link' )
        targetEl = $('fieldset.contact-attendees');
    else if ( this.id == 'invite-friends-link' )
        targetEl = $('#taf');
    // Unhide e-mail form if needed
    if ( /^email-/.test(this.id) ) {
        var emailButton = targetEl.closest('form').find('input[type="submit"].email');
        handleEmail.apply(emailButton, []);
    }
    // Highlight
    targetEl.addClass('target');
    // Allow jump to #foo to happen
    return true;
}
// Confirm cancelling event
function confirmSubmit() {
    return confirm($(this).attr('confirm-message'));
}
// Stash the name of the submit button in the 'action' form field
// (helps the validation JS see which kind of action to validate for)
function setFormAction() {
    var formEl = $(this).closest('form')[0];
    if ( !formEl && !formEl.action ) return;
    formEl.action.value = this.name;
}
// Check for required fields for remove/promote/demote/e-mail
function validateRoster(form) {
    var action = form.action.value;
    // Nobody to remove/promote/demote
    if ( /(change-role|remove)/.test(action)
         && !($(form).find('input.toggle:checked').length) )
        actionkit.errors['user_id:missing'] =
            actionkit.forms.errorMessage('event_roster_user_ids:missing');
    // No message to send
    if ( action == 'send_email'
         && !form.body.value )
        actionkit.errors['body:missing'] =
            actionkit.forms.errorMessage('event_contact_body:missing');
}
// Confirm removing folks
function confirmRoster(form) {
    var action = form.action.value;
    var actionButton = $(form).find('input[name="' + action + '"]');
    var confirmMessage = actionButton.attr('confirm-message');
    if ( confirmMessage )
        return confirm(confirmMessage);
    else
        return true;
}
// Click anywhere in row to check/uncheck attendee
function toggleRow(e) {
    var toggleEl = $(this).closest('tr').find('.toggle')[0];
    if ( toggleEl ) toggleEl.checked = !toggleEl.checked;
    return false;
}
// Update the confirmation div from a different page
function updateConfirmationMessage() {
    for (var key in actionkit.args) {
        if (key.indexOf(':') > 0 && actionkit.args[key] == 1) {
            $('#ak-confirmation').text(actionkit.forms.text['error_' + key]);
            $('#ak-confirmation').show();
        }
    }
}
// Set everything up onready
function initHostTools() {
    $('input.toggle-all').click(toggleSignups);
    $('input.toggle').click(handleSignupsChanged);
    $('.signup-list td:not(.toggle-col)').click(toggleRow);
    $('input[type="submit"].email').click(handleEmail);
    $('input[type="submit"]').click(setFormAction);
    $('.jump-link').click(handleJumpLink);
    $('a[confirm-message]').click(confirmSubmit);
    if ($('#manage-host').length)
        actionkit.forms.initValidation('manage-host');
    if ($('#manage-attendee').length)
        actionkit.forms.initValidation('manage-attendee');
    $(window).load(function() {
        updateConfirmationMessage();
    });
}
$(initHostTools);

// From http://snipplr.com/view/43646/prepopulate-form-with-values-from-querystring/
$(document).ready(function() {

  $('form').each(function() {
    var form = this;
    if (location.search == null || location.search.length < 1) {
      return; // no querystring
    }
    var pairs = location.search.substring(1).split("&");
    for (var p = 0; p < pairs.length; ++p ) {
      var pair = pairs[p].split("=");
      var name = pair[0];
      var value = unescape( pair[1].replace(/\+/g, " ") );
      var field = form.elements[name];
      var fieldType = null;
      var fieldIsMultivalue = false;

      if (field != null){
        if (field.length != null && field.length >= 1 && field[0].type != null && field[0].type != undefined) {
          fieldType = field[0].type;
          fieldIsMultivalue = true;
        } else {
          fieldType = field.type;
        }
      }
      switch (fieldType) {
        case "text":
        case "hidden":
        case "textarea":
          if (fieldIsMultivalue) {
            field = field[0]; // only handle first-named for this type
          }
          field.value = value;
          $(field).trigger('change');
          break;
        case "select-one":
        case "select-multiple":
          if (fieldIsMultivalue) {
            field = field[0]; // only handle first-named for this type
          }
          for (var o = 0; o < field.options.length; ++o) {
            var opt = field.options[o];
            var oval = opt.value;
            if (oval == null || oval == "" ) {
              oval = opt.text;
            }
            if (oval == value) {
              opt.selected = true;
              $(field).trigger('change');
              break;
            }
          }
          break;
        case "checkbox": case "radio":
          if (!fieldIsMultivalue) {
            // single checbox or radio of that name:
            field.checked = true;
          } else {
            for (var cr = 0; cr < field.length; ++cr) {
              if ( field[cr].value == value ) {
                field[cr].checked = true;
                $(field).trigger('change');
                break;
              }
            }
          }
          break;
        default:
          break;
      } // end of switch
    } // end of loop on fields from qs
  });
});

/*
 * Mailcheck https://github.com/Kicksend/mailcheck
 * Author
 * Derrick Ko (@derrickko)
 *
 * License
 * Copyright (c) 2012 Receivd, Inc.
 *
 * Licensed under the MIT License.
 *
 * v 1.0.1 - (plus a patch for IE6&7 from https://github.com/Kicksend/mailcheck/issues/14)
 */

(function($){
  $.fn.mailcheck = function(opts, optsAlt) {
    var defaultDomains = ["yahoo.com", "google.com", "hotmail.com", "gmail.com", "me.com", "aol.com", "mac.com",
                          "live.com", "comcast.net", "googlemail.com", "msn.com", "hotmail.co.uk", "yahoo.co.uk",
                          "facebook.com", "verizon.net", "sbcglobal.net", "att.net", "gmx.com", "mail.com"];

    if (typeof opts === 'object' && optsAlt === undefined) {
      // only opts is passed in
      opts.domains = opts.domains || defaultDomains;
    } else {
      // domains are passed in as opts
      var domains = opts;
      opts = optsAlt;
      opts.domains = domains || defaultDomains;
    }

    var result = Kicksend.mailcheck.suggest(encodeURI(this.val()), opts.domains);
    if (result) {
      if (opts.suggested) {
        opts.suggested(this, result);
      }
    } else {
      if (opts.empty) {
        opts.empty(this);
      }
    }
  };
})(jQuery);

var Kicksend = {
  mailcheck : {
    threshold: 3,

    suggest: function(email, domains) {
      email = email.toLowerCase();

      var emailParts = this.splitEmail(email);

      var closestDomain = this.findClosestDomain(emailParts.domain, domains);

      if (closestDomain) {
        return { address: emailParts.address, domain: closestDomain, full: emailParts.address + "@" + closestDomain }
      } else {
        return false;
      }
    },

    findClosestDomain: function(domain, domains) {
      var dist;
      var minDist = 99;
      var closestDomain = null;

      for (var i = 0; i < domains.length; i++) {
        if (domain === domains[i]) {
          return false;
        }
        dist = this.stringDistance(domain, domains[i]);
        if (dist < minDist) {
          minDist = dist;
          closestDomain = domains[i];
        }
      }

      if (minDist <= this.threshold && closestDomain !== null) {
        return closestDomain;
      } else {
        return false;
      }
    },

    stringDistance: function(s1, s2) {
      // sift3: http://siderite.blogspot.com/2007/04/super-fast-and-accurate-string-distance.html
      if (s1 == null || s1.length === 0) {
        if (s2 == null || s2.length === 0) {
          return 0;
        } else {
          return s2.length;
        }
      }

      if (s2 == null || s2.length === 0) {
        return s1.length;
      }

      var c = 0;
      var offset1 = 0;
      var offset2 = 0;
      var lcs = 0;
      var maxOffset = 5;

      while ((c + offset1 < s1.length) && (c + offset2 < s2.length)) {
        if (s1.charAt(c + offset1) == s2.charAt(c + offset2)) {
          lcs++;
        } else {
          offset1 = 0;
          offset2 = 0;
          for (var i = 0; i < maxOffset; i++) {
            if ((c + i < s1.length) && (s1.charAt(c + i) == s2.charAt(c))) {
              offset1 = i;
              break;
            }
            if ((c + i < s2.length) && (s1.charAt(c) == s2.charAt(c + i))) {
              offset2 = i;
              break;
            }
          }
        }
        c++;
      }
      return (s1.length + s2.length) /2 - lcs;
    },

    splitEmail: function(email) {
      var parts = email.split('@');

      if (parts.length < 2) {
        return false;
      }

      for (var i = 0; i < parts.length; i++) {
        if (parts[i] === '') {
          return false;
        }
      }

      return {
        domain: parts.pop(),
        address: parts.join('@')
      }
    }
  }
};

function shuffle(array) {
  var currentIndex = array.length, temporaryValue, randomIndex ;

  // While there remain elements to shuffle...
  while (0 !== currentIndex) {

    // Pick a remaining element...
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    // And swap it with the current element.
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}
function shuffleQuestions() {
  $('.randomized-options').each(function(){
    var $options = $(this);
    var rows = [];
    $options.find('.option').each(function() {
      var $option = $(this);
      rows.push($option.clone());
      $option.remove();
    });
    shuffle(rows);
    $.each(rows, function() {
      $options.append($(this));
    });
  });
}

$(document).ready(shuffleQuestions);

$(document).ready(function() {

  var $checkboxCol = $('<div class="col-md-8 checkbox"></div>');
  var $checkbox = $('<input type="checkbox" name="retired" />')
    .click(function() {
      var $this = $(this);
      var $info = $('#employer-occupation-info');
      if ($this.is(':checked')) {
        $info.addClass('hidden');
        $info.find('#action_employer').val('None');
        $info.find('#action_occupation').val('Not employed');
      }
      else {
        $info.removeClass('hidden');
      }
    });
  var $checkboxLabel = $('<label for="retired"> </label>');
  var $checkboxSpan = $('<span>I am retired or unemployed</span>')
    .click(function() {
      $('input[name=retired]').click();
    });
  $checkboxLabel.prepend($checkbox).append($checkboxSpan);
  $checkboxCol.append($checkboxLabel);
  $('#retired-checkbox').append($checkboxCol);

});

$(document).ready(function() {
  if ($('#card_num').length > 0) {
    $('#card_num').validateCreditCard(function(result) {
      $('#card_num_box .cc-icons .wf-icon').removeClass('matched');
      if (result.valid) {
        $('#card_num_box .cc-icons .icon-' + result.card_type.name).addClass('matched');
      }
      if (result.valid || $('#card_num').val().length == 0) {
        $('#card_num_box').removeClass('has-error');
      }
      else {
        $('#card_num_box').addClass('has-error');
      }
    });
  }
});
